//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ogsimp\Desktop\genetycz\GPlanguage\ConsoleApp1\Content\MyGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApp1.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyGrammarParser : Parser {
	public const int
		WS=1, LPAREN=2, RPAREN=3, LBRACE=4, RBRACE=5, ADD=6, SUB=7, MUL=8, DIV=9, 
		MOD=10, ASS=11, EQ=12, NEQ=13, LE=14, LEQ=15, GE=16, GEQ=17, AND=18, OR=19, 
		NOT=20, TRUE=21, FALSE=22, IF=23, WHILE=24, PRINT=25, SCAN=26, NUMBER=27, 
		NUM_VAR=28, BOOL_VAR=29;
	public const int
		RULE_program = 0, RULE_expressions = 1, RULE_if_statement = 2, RULE_while_loop = 3, 
		RULE_print_call = 4, RULE_scan_call = 5, RULE_assignment = 6, RULE_comparisson_type = 7, 
		RULE_logic_operator = 8, RULE_aritmetic_operator_strong = 9, RULE_aritmetic_operator_weak = 10, 
		RULE_bool_value = 11, RULE_numeric_value = 12;
	public static readonly string[] ruleNames = {
		"program", "expressions", "if_statement", "while_loop", "print_call", 
		"scan_call", "assignment", "comparisson_type", "logic_operator", "aritmetic_operator_strong", 
		"aritmetic_operator_weak", "bool_value", "numeric_value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
		"'true'", "'false'", "'if'", "'while'", "'print'", "'scan'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "ADD", "SUB", "MUL", 
		"DIV", "MOD", "ASS", "EQ", "NEQ", "LE", "LEQ", "GE", "GEQ", "AND", "OR", 
		"NOT", "TRUE", "FALSE", "IF", "WHILE", "PRINT", "SCAN", "NUMBER", "NUM_VAR", 
		"BOOL_VAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public Print_callContext print_call() {
			return GetRuleContext<Print_callContext>(0);
		}
		public Scan_callContext scan_call() {
			return GetRuleContext<Scan_callContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IF:
				{
				State = 28; if_statement();
				}
				break;
			case WHILE:
				{
				State = 29; while_loop();
				}
				break;
			case PRINT:
				{
				State = 30; print_call();
				}
				break;
			case SCAN:
				{
				State = 31; scan_call();
				}
				break;
			case NUM_VAR:
			case BOOL_VAR:
				{
				State = 32; assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 36;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << PRINT) | (1L << SCAN) | (1L << NUM_VAR) | (1L << BOOL_VAR))) != 0)) {
				{
				State = 35; expressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
	 
		public If_statementContext() { }
		public virtual void CopyFrom(If_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : If_statementContext {
		public ITerminalNode IF() { return GetToken(MyGrammarParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyGrammarParser.LPAREN, 0); }
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MyGrammarParser.RPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(MyGrammarParser.LBRACE, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(MyGrammarParser.RBRACE, 0); }
		public IfStatementContext(If_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_if_statement);
		try {
			_localctx = new IfStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(IF);
			State = 39; Match(LPAREN);
			State = 40; bool_value(0);
			State = 41; Match(RPAREN);
			State = 42; Match(LBRACE);
			State = 43; expressions();
			State = 44; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
	 
		public While_loopContext() { }
		public virtual void CopyFrom(While_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatementContext : While_loopContext {
		public ITerminalNode WHILE() { return GetToken(MyGrammarParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyGrammarParser.LPAREN, 0); }
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MyGrammarParser.RPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(MyGrammarParser.LBRACE, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(MyGrammarParser.RBRACE, 0); }
		public WhileStatementContext(While_loopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_while_loop);
		try {
			_localctx = new WhileStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(WHILE);
			State = 47; Match(LPAREN);
			State = 48; bool_value(0);
			State = 49; Match(RPAREN);
			State = 50; Match(LBRACE);
			State = 51; expressions();
			State = 52; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_callContext : ParserRuleContext {
		public Print_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_call; } }
	 
		public Print_callContext() { }
		public virtual void CopyFrom(Print_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintNumContext : Print_callContext {
		public ITerminalNode PRINT() { return GetToken(MyGrammarParser.PRINT, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyGrammarParser.LPAREN, 0); }
		public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MyGrammarParser.RPAREN, 0); }
		public PrintNumContext(Print_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterPrintNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitPrintNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintBoolContext : Print_callContext {
		public ITerminalNode PRINT() { return GetToken(MyGrammarParser.PRINT, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyGrammarParser.LPAREN, 0); }
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MyGrammarParser.RPAREN, 0); }
		public PrintBoolContext(Print_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterPrintBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitPrintBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_callContext print_call() {
		Print_callContext _localctx = new Print_callContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_print_call);
		try {
			State = 64;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				_localctx = new PrintNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; Match(PRINT);
				State = 55; Match(LPAREN);
				State = 56; numeric_value(0);
				State = 57; Match(RPAREN);
				}
				break;

			case 2:
				_localctx = new PrintBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; Match(PRINT);
				State = 60; Match(LPAREN);
				State = 61; bool_value(0);
				State = 62; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scan_callContext : ParserRuleContext {
		public Scan_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scan_call; } }
	 
		public Scan_callContext() { }
		public virtual void CopyFrom(Scan_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ScanBoolContext : Scan_callContext {
		public ITerminalNode SCAN() { return GetToken(MyGrammarParser.SCAN, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyGrammarParser.LPAREN, 0); }
		public ITerminalNode BOOL_VAR() { return GetToken(MyGrammarParser.BOOL_VAR, 0); }
		public ITerminalNode RPAREN() { return GetToken(MyGrammarParser.RPAREN, 0); }
		public ScanBoolContext(Scan_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterScanBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitScanBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScanBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScanNumContext : Scan_callContext {
		public ITerminalNode SCAN() { return GetToken(MyGrammarParser.SCAN, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyGrammarParser.LPAREN, 0); }
		public ITerminalNode NUM_VAR() { return GetToken(MyGrammarParser.NUM_VAR, 0); }
		public ITerminalNode RPAREN() { return GetToken(MyGrammarParser.RPAREN, 0); }
		public ScanNumContext(Scan_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterScanNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitScanNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScanNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scan_callContext scan_call() {
		Scan_callContext _localctx = new Scan_callContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_scan_call);
		try {
			State = 74;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new ScanNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; Match(SCAN);
				State = 67; Match(LPAREN);
				State = 68; Match(NUM_VAR);
				State = 69; Match(RPAREN);
				}
				break;

			case 2:
				_localctx = new ScanBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; Match(SCAN);
				State = 71; Match(LPAREN);
				State = 72; Match(BOOL_VAR);
				State = 73; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignBoolContext : AssignmentContext {
		public ITerminalNode BOOL_VAR() { return GetToken(MyGrammarParser.BOOL_VAR, 0); }
		public ITerminalNode ASS() { return GetToken(MyGrammarParser.ASS, 0); }
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public AssignBoolContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAssignBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAssignBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignNumContext : AssignmentContext {
		public ITerminalNode NUM_VAR() { return GetToken(MyGrammarParser.NUM_VAR, 0); }
		public ITerminalNode ASS() { return GetToken(MyGrammarParser.ASS, 0); }
		public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		public AssignNumContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAssignNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAssignNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			State = 82;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUM_VAR:
				_localctx = new AssignNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; Match(NUM_VAR);
				State = 77; Match(ASS);
				State = 78; numeric_value(0);
				}
				break;
			case BOOL_VAR:
				_localctx = new AssignBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; Match(BOOL_VAR);
				State = 80; Match(ASS);
				State = 81; bool_value(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparisson_typeContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(MyGrammarParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(MyGrammarParser.NEQ, 0); }
		public ITerminalNode LE() { return GetToken(MyGrammarParser.LE, 0); }
		public ITerminalNode LEQ() { return GetToken(MyGrammarParser.LEQ, 0); }
		public ITerminalNode GE() { return GetToken(MyGrammarParser.GE, 0); }
		public ITerminalNode GEQ() { return GetToken(MyGrammarParser.GEQ, 0); }
		public Comparisson_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisson_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterComparisson_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitComparisson_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisson_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparisson_typeContext comparisson_type() {
		Comparisson_typeContext _localctx = new Comparisson_typeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_comparisson_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << LE) | (1L << LEQ) | (1L << GE) | (1L << GEQ))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logic_operatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(MyGrammarParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MyGrammarParser.OR, 0); }
		public Logic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterLogic_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitLogic_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_operatorContext logic_operator() {
		Logic_operatorContext _localctx = new Logic_operatorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_logic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = _input.La(1);
			if ( !(_la==AND || _la==OR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aritmetic_operator_strongContext : ParserRuleContext {
		public ITerminalNode MUL() { return GetToken(MyGrammarParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(MyGrammarParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(MyGrammarParser.MOD, 0); }
		public Aritmetic_operator_strongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aritmetic_operator_strong; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAritmetic_operator_strong(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAritmetic_operator_strong(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritmetic_operator_strong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aritmetic_operator_strongContext aritmetic_operator_strong() {
		Aritmetic_operator_strongContext _localctx = new Aritmetic_operator_strongContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_aritmetic_operator_strong);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aritmetic_operator_weakContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(MyGrammarParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(MyGrammarParser.SUB, 0); }
		public Aritmetic_operator_weakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aritmetic_operator_weak; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAritmetic_operator_weak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAritmetic_operator_weak(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritmetic_operator_weak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aritmetic_operator_weakContext aritmetic_operator_weak() {
		Aritmetic_operator_weakContext _localctx = new Aritmetic_operator_weakContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_aritmetic_operator_weak);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_valueContext : ParserRuleContext {
		public Bool_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_value; } }
	 
		public Bool_valueContext() { }
		public virtual void CopyFrom(Bool_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenBoolValContext : Bool_valueContext {
		public ITerminalNode LPAREN() { return GetToken(MyGrammarParser.LPAREN, 0); }
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MyGrammarParser.RPAREN, 0); }
		public ParenBoolValContext(Bool_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterParenBoolVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitParenBoolVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenBoolVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompValContext : Bool_valueContext {
		public Numeric_valueContext[] numeric_value() {
			return GetRuleContexts<Numeric_valueContext>();
		}
		public Numeric_valueContext numeric_value(int i) {
			return GetRuleContext<Numeric_valueContext>(i);
		}
		public Comparisson_typeContext comparisson_type() {
			return GetRuleContext<Comparisson_typeContext>(0);
		}
		public CompValContext(Bool_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterCompVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitCompVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueValContext : Bool_valueContext {
		public ITerminalNode TRUE() { return GetToken(MyGrammarParser.TRUE, 0); }
		public TrueValContext(Bool_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterTrueVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitTrueVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicValContext : Bool_valueContext {
		public Bool_valueContext[] bool_value() {
			return GetRuleContexts<Bool_valueContext>();
		}
		public Bool_valueContext bool_value(int i) {
			return GetRuleContext<Bool_valueContext>(i);
		}
		public Logic_operatorContext logic_operator() {
			return GetRuleContext<Logic_operatorContext>(0);
		}
		public LogicValContext(Bool_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterLogicVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitLogicVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotValContext : Bool_valueContext {
		public ITerminalNode NOT() { return GetToken(MyGrammarParser.NOT, 0); }
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public NotValContext(Bool_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterNotVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitNotVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolVarValContext : Bool_valueContext {
		public ITerminalNode BOOL_VAR() { return GetToken(MyGrammarParser.BOOL_VAR, 0); }
		public BoolVarValContext(Bool_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterBoolVarVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitBoolVarVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolVarVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseValContext : Bool_valueContext {
		public ITerminalNode FALSE() { return GetToken(MyGrammarParser.FALSE, 0); }
		public FalseValContext(Bool_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterFalseVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitFalseVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_valueContext bool_value() {
		return bool_value(0);
	}

	private Bool_valueContext bool_value(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Bool_valueContext _localctx = new Bool_valueContext(_ctx, _parentState);
		Bool_valueContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_bool_value, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				_localctx = new BoolVarValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 93; Match(BOOL_VAR);
				}
				break;

			case 2:
				{
				_localctx = new TrueValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 94; Match(TRUE);
				}
				break;

			case 3:
				{
				_localctx = new FalseValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 95; Match(FALSE);
				}
				break;

			case 4:
				{
				_localctx = new NotValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 96; Match(NOT);
				State = 97; bool_value(4);
				}
				break;

			case 5:
				{
				_localctx = new CompValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 98; numeric_value(0);
				State = 99; comparisson_type();
				State = 100; numeric_value(0);
				}
				break;

			case 6:
				{
				_localctx = new ParenBoolValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 102; Match(LPAREN);
				State = 103; bool_value(0);
				State = 104; Match(RPAREN);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 114;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicValContext(new Bool_valueContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bool_value);
					State = 108;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 109; logic_operator();
					State = 110; bool_value(3);
					}
					} 
				}
				State = 116;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Numeric_valueContext : ParserRuleContext {
		public Numeric_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_value; } }
	 
		public Numeric_valueContext() { }
		public virtual void CopyFrom(Numeric_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AritStrongValContext : Numeric_valueContext {
		public Numeric_valueContext[] numeric_value() {
			return GetRuleContexts<Numeric_valueContext>();
		}
		public Numeric_valueContext numeric_value(int i) {
			return GetRuleContext<Numeric_valueContext>(i);
		}
		public Aritmetic_operator_strongContext aritmetic_operator_strong() {
			return GetRuleContext<Aritmetic_operator_strongContext>(0);
		}
		public AritStrongValContext(Numeric_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAritStrongVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAritStrongVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritStrongVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumValContext : Numeric_valueContext {
		public ITerminalNode NUMBER() { return GetToken(MyGrammarParser.NUMBER, 0); }
		public NumValContext(Numeric_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterNumVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitNumVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumVarValContext : Numeric_valueContext {
		public ITerminalNode NUM_VAR() { return GetToken(MyGrammarParser.NUM_VAR, 0); }
		public NumVarValContext(Numeric_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterNumVarVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitNumVarVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumVarVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenNumValContext : Numeric_valueContext {
		public ITerminalNode LPAREN() { return GetToken(MyGrammarParser.LPAREN, 0); }
		public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MyGrammarParser.RPAREN, 0); }
		public ParenNumValContext(Numeric_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterParenNumVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitParenNumVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenNumVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubValContext : Numeric_valueContext {
		public ITerminalNode SUB() { return GetToken(MyGrammarParser.SUB, 0); }
		public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		public SubValContext(Numeric_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterSubVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitSubVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AritWeakValContext : Numeric_valueContext {
		public Numeric_valueContext[] numeric_value() {
			return GetRuleContexts<Numeric_valueContext>();
		}
		public Numeric_valueContext numeric_value(int i) {
			return GetRuleContext<Numeric_valueContext>(i);
		}
		public Aritmetic_operator_weakContext aritmetic_operator_weak() {
			return GetRuleContext<Aritmetic_operator_weakContext>(0);
		}
		public AritWeakValContext(Numeric_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAritWeakVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAritWeakVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritWeakVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_valueContext numeric_value() {
		return numeric_value(0);
	}

	private Numeric_valueContext numeric_value(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Numeric_valueContext _localctx = new Numeric_valueContext(_ctx, _parentState);
		Numeric_valueContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_numeric_value, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				{
				_localctx = new NumValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 118; Match(NUMBER);
				}
				break;
			case NUM_VAR:
				{
				_localctx = new NumVarValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 119; Match(NUM_VAR);
				}
				break;
			case SUB:
				{
				_localctx = new SubValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 120; Match(SUB);
				State = 121; numeric_value(4);
				}
				break;
			case LPAREN:
				{
				_localctx = new ParenNumValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 122; Match(LPAREN);
				State = 123; numeric_value(0);
				State = 124; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 138;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 136;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						_localctx = new AritStrongValContext(new Numeric_valueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numeric_value);
						State = 128;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 129; aritmetic_operator_strong();
						State = 130; numeric_value(4);
						}
						break;

					case 2:
						{
						_localctx = new AritWeakValContext(new Numeric_valueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numeric_value);
						State = 132;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 133; aritmetic_operator_weak();
						State = 134; numeric_value(3);
						}
						break;
					}
					} 
				}
				State = 140;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return bool_value_sempred((Bool_valueContext)_localctx, predIndex);

		case 12: return numeric_value_sempred((Numeric_valueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bool_value_sempred(Bool_valueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool numeric_value_sempred(Numeric_valueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1F\x90\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3$\n\x3\x3\x3\x5\x3\'\n\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x5\x6\x43\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aM\n\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bU\n\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x5\rm\n\r\x3\r\x3\r\x3\r\x3\r\a\rs\n\r\f\r\xE\rv\v\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x81\n\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x8B\n\xE\f\xE\xE\xE\x8E\v"+
		"\xE\x3\xE\x2\x2\x4\x18\x1A\xF\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x2\x6\x3\x2\xE\x13\x3\x2\x14\x15"+
		"\x3\x2\n\f\x3\x2\b\t\x95\x2\x1C\x3\x2\x2\x2\x4#\x3\x2\x2\x2\x6(\x3\x2"+
		"\x2\x2\b\x30\x3\x2\x2\x2\n\x42\x3\x2\x2\x2\fL\x3\x2\x2\x2\xET\x3\x2\x2"+
		"\x2\x10V\x3\x2\x2\x2\x12X\x3\x2\x2\x2\x14Z\x3\x2\x2\x2\x16\\\x3\x2\x2"+
		"\x2\x18l\x3\x2\x2\x2\x1A\x80\x3\x2\x2\x2\x1C\x1D\x5\x4\x3\x2\x1D\x3\x3"+
		"\x2\x2\x2\x1E$\x5\x6\x4\x2\x1F$\x5\b\x5\x2 $\x5\n\x6\x2!$\x5\f\a\x2\""+
		"$\x5\xE\b\x2#\x1E\x3\x2\x2\x2#\x1F\x3\x2\x2\x2# \x3\x2\x2\x2#!\x3\x2\x2"+
		"\x2#\"\x3\x2\x2\x2$&\x3\x2\x2\x2%\'\x5\x4\x3\x2&%\x3\x2\x2\x2&\'\x3\x2"+
		"\x2\x2\'\x5\x3\x2\x2\x2()\a\x19\x2\x2)*\a\x4\x2\x2*+\x5\x18\r\x2+,\a\x5"+
		"\x2\x2,-\a\x6\x2\x2-.\x5\x4\x3\x2./\a\a\x2\x2/\a\x3\x2\x2\x2\x30\x31\a"+
		"\x1A\x2\x2\x31\x32\a\x4\x2\x2\x32\x33\x5\x18\r\x2\x33\x34\a\x5\x2\x2\x34"+
		"\x35\a\x6\x2\x2\x35\x36\x5\x4\x3\x2\x36\x37\a\a\x2\x2\x37\t\x3\x2\x2\x2"+
		"\x38\x39\a\x1B\x2\x2\x39:\a\x4\x2\x2:;\x5\x1A\xE\x2;<\a\x5\x2\x2<\x43"+
		"\x3\x2\x2\x2=>\a\x1B\x2\x2>?\a\x4\x2\x2?@\x5\x18\r\x2@\x41\a\x5\x2\x2"+
		"\x41\x43\x3\x2\x2\x2\x42\x38\x3\x2\x2\x2\x42=\x3\x2\x2\x2\x43\v\x3\x2"+
		"\x2\x2\x44\x45\a\x1C\x2\x2\x45\x46\a\x4\x2\x2\x46G\a\x1E\x2\x2GM\a\x5"+
		"\x2\x2HI\a\x1C\x2\x2IJ\a\x4\x2\x2JK\a\x1F\x2\x2KM\a\x5\x2\x2L\x44\x3\x2"+
		"\x2\x2LH\x3\x2\x2\x2M\r\x3\x2\x2\x2NO\a\x1E\x2\x2OP\a\r\x2\x2PU\x5\x1A"+
		"\xE\x2QR\a\x1F\x2\x2RS\a\r\x2\x2SU\x5\x18\r\x2TN\x3\x2\x2\x2TQ\x3\x2\x2"+
		"\x2U\xF\x3\x2\x2\x2VW\t\x2\x2\x2W\x11\x3\x2\x2\x2XY\t\x3\x2\x2Y\x13\x3"+
		"\x2\x2\x2Z[\t\x4\x2\x2[\x15\x3\x2\x2\x2\\]\t\x5\x2\x2]\x17\x3\x2\x2\x2"+
		"^_\b\r\x1\x2_m\a\x1F\x2\x2`m\a\x17\x2\x2\x61m\a\x18\x2\x2\x62\x63\a\x16"+
		"\x2\x2\x63m\x5\x18\r\x6\x64\x65\x5\x1A\xE\x2\x65\x66\x5\x10\t\x2\x66g"+
		"\x5\x1A\xE\x2gm\x3\x2\x2\x2hi\a\x4\x2\x2ij\x5\x18\r\x2jk\a\x5\x2\x2km"+
		"\x3\x2\x2\x2l^\x3\x2\x2\x2l`\x3\x2\x2\x2l\x61\x3\x2\x2\x2l\x62\x3\x2\x2"+
		"\x2l\x64\x3\x2\x2\x2lh\x3\x2\x2\x2mt\x3\x2\x2\x2no\f\x4\x2\x2op\x5\x12"+
		"\n\x2pq\x5\x18\r\x5qs\x3\x2\x2\x2rn\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2"+
		"\x2\x2tu\x3\x2\x2\x2u\x19\x3\x2\x2\x2vt\x3\x2\x2\x2wx\b\xE\x1\x2x\x81"+
		"\a\x1D\x2\x2y\x81\a\x1E\x2\x2z{\a\t\x2\x2{\x81\x5\x1A\xE\x6|}\a\x4\x2"+
		"\x2}~\x5\x1A\xE\x2~\x7F\a\x5\x2\x2\x7F\x81\x3\x2\x2\x2\x80w\x3\x2\x2\x2"+
		"\x80y\x3\x2\x2\x2\x80z\x3\x2\x2\x2\x80|\x3\x2\x2\x2\x81\x8C\x3\x2\x2\x2"+
		"\x82\x83\f\x5\x2\x2\x83\x84\x5\x14\v\x2\x84\x85\x5\x1A\xE\x6\x85\x8B\x3"+
		"\x2\x2\x2\x86\x87\f\x4\x2\x2\x87\x88\x5\x16\f\x2\x88\x89\x5\x1A\xE\x5"+
		"\x89\x8B\x3\x2\x2\x2\x8A\x82\x3\x2\x2\x2\x8A\x86\x3\x2\x2\x2\x8B\x8E\x3"+
		"\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x1B\x3\x2\x2\x2"+
		"\x8E\x8C\x3\x2\x2\x2\f#&\x42LTlt\x80\x8A\x8C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApp1.Content
